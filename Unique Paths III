On a 2-dimensional grid, there are 4 types of squares:

1 represents the starting square.  There is exactly one starting square.
2 represents the ending square.  There is exactly one ending square.
0 represents empty squares we can walk over.
-1 represents obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:

Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:

Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:

Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Note:

1 <= grid.length * grid[0].length <= 20

//cpp my solution [recursive]


class Solution {
    int sz,_sz,no=0,ans=0;
    pair<int,int> start;
    vector<vector<int>> grid;
public:
    void travel(int x,int y,vector<vector<int>> &vis,int hm){
        if(x==sz || y==_sz || x<0 || y<0)
            return;
        
        if(vis[x][y]==1 || grid[x][y] == 1 || grid[x][y]==-1)
            return;
        
        if(grid[x][y]==2 && hm==no){
            ++ans;
            return;
        }
        
        vis[x][y]=1;
        ++hm;
        
        if(x+1<sz)
            travel(x+1,y,vis,hm);
        if(x-1>=0)
            travel(x-1,y,vis,hm);
        if(y+1<_sz)
            travel(x,y+1,vis,hm);
        if(y-1>=0)
            travel(x,y-1,vis,hm);
        vis[x][y]=0;
    }
    int uniquePathsIII(vector<vector<int>>& gd) {
        grid=gd;
        sz = grid.size();
        _sz = grid[0].size();
        
        for(int i=0;i<sz;i++)    
            for(int j=0;j<_sz;j++){   
                if(grid[i][j]==0)
                    ++no;
                if(grid[i][j]==1){
                    start = {i,j};
                }
            }
        
        vector<vector<int>> vis(sz,vector<int>(_sz,0));
        if(start.first+1<sz)
            travel(start.first+1,start.second,vis,0);
        if(start.first-1>=0)
            travel(start.first-1,start.second,vis,0);
        if(start.second+1<_sz)
            travel(start.first,start.second+1,vis,0);
        if(start.second-1>=0)
            travel(start.first,start.second-1,vis,0);
        return ans;
    }
};

//cpp solution 2 with less space complexity and more clean code
//took hint from others solution


class Solution {
    int sz,_sz,no=0,ans=0;
    pair<int,int> start;
public:
    void travel(int x,int y,vector<vector<int>> &grid,int hm){
        if(x==sz || y==_sz || x<0 || y<0)
            return;
        
        if(grid[x][y] == 1 || grid[x][y]==-1)
            return;
        
        if(grid[x][y]==2){
            if(hm==no) ++ans;
            return;
        }
        
        grid[x][y]=-1;
        ++hm;
        
        travel(x+1,y,grid,hm);
        travel(x-1,y,grid,hm);
        travel(x,y+1,grid,hm);
        travel(x,y-1,grid,hm);
        grid[x][y]=0;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        sz = grid.size();
        _sz = grid[0].size();
        
        for(int i=0;i<sz;i++)    
            for(int j=0;j<_sz;j++){   
                if(grid[i][j]==0)
                    ++no;
                if(grid[i][j]==1){
                    start = {i,j};
                }
            }
        
        travel(start.first+1,start.second,grid,0);
        travel(start.first-1,start.second,grid,0);
        travel(start.first,start.second+1,grid,0);
        travel(start.first,start.second-1,grid,0);
        return ans;
    }
};

//cpp more clean code solution 3

class Solution {
    int sz,_sz,no=0,ans=0;
public:
    void travel(int x,int y,vector<vector<int>> &grid,int hm){
        if(x==sz || y==_sz || x<0 || y<0 || grid[x][y] == 1 || grid[x][y]==-1)   
            return;
        
        if(grid[x][y]==2){
            ans+=(hm==no);
            return;
        }
        
        grid[x][y]=-1;
        ++hm;
        
        travel(x+1,y,grid,hm);
        travel(x-1,y,grid,hm);
        travel(x,y+1,grid,hm);
        travel(x,y-1,grid,hm);
        
        grid[x][y]=0;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        pair<int,int> start;
        sz = grid.size();
        _sz = grid[0].size();
        
        for(int i=0;i<sz;i++)    
            for(int j=0;j<_sz;j++){   
                if(grid[i][j]==0)   ++no;
                if(grid[i][j]==1)   start = {i,j};
            }
        
        travel(start.first+1,start.second,grid,0);
        travel(start.first-1,start.second,grid,0);
        travel(start.first,start.second+1,grid,0);
        travel(start.first,start.second-1,grid,0);
        return ans;
    }
};
