You are given equations in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating-point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

//cpp NOT my solution
//as i have not even attempted it as i am still learning about graphs
//and this was  graph problem

class Solution {
public:
    #define pb push_back
    unordered_map<string,vector<string>> edge;
    map<pair<string,string>,double> weig;
    double ans=-1;
    unordered_map<string,bool> vist;
    unordered_map<string,bool> present;
    void dfs(string s,string d,double tmp){
        vist[s]=true;
        if(s==d){
            ans=tmp;
            return ;
        }
        for(auto i:edge[s]){
            if(!vist[i]){
                dfs(i,d,tmp*weig[{s,i}]);
            }
        }
    }
    
    vector<double> calcEquation(vector<vector<string>>& eq, vector<double>& values, vector<vector<string>>& queries) {    
        for(int i=0;i<eq.size();i++){
            edge[eq[i][0]].pb(eq[i][1]);
            edge[eq[i][1]].pb(eq[i][0]);
            present[eq[i][0]]=present[eq[i][1]]=true;
            weig[{eq[i][0],eq[i][1]}]=values[i];
            weig[{eq[i][1],eq[i][0]}]=1/values[i];
        }
        vector<double> ans1;
        for(auto i:queries){
            vist.clear();
            ans=-1;
            if(present[i[0]] and present[i[1]])
                dfs(i[0],i[1],1.0);
            ans1.pb(ans);
        }
        return ans1;
    }
};
