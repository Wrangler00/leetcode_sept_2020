Given two binary search trees root1 and root2.

Return a list containing all the integers from both trees sorted in ascending order.

 

Example 1:


Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]
Example 2:

Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]
Example 3:

Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]
Example 4:

Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]
Example 5:


Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]
 

Constraints:

Each tree has at most 5000 nodes.
Each node's value is between [-10^5, 10^5].

//cpp my solution using inorder and merge sort

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> ans;
    vector<int> list[2];
public:
    void mergeSort(){
        int sz1=list[0].size();
        int sz2=list[1].size();
        int i=0,j=0;
        
        while(i<sz1 || j<sz2){
            if(i>=sz1){
                ans.push_back(list[1][j++]);
            }else if(j>=sz2){
                ans.push_back(list[0][i++]);
            }else if(list[0][i]<=list[1][j]){
                ans.push_back(list[0][i++]);
            }else{
                ans.push_back(list[1][j++]);
            }
        }
    }
    void inorder(TreeNode *p1 ,bool which){
        if(p1==NULL)    return;
        inorder(p1->left,which);
        list[which].push_back(p1->val);
        inorder(p1->right,which);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        inorder(root1,0);
        inorder(root2,1);
        mergeSort();
        return ans;
    }
};
