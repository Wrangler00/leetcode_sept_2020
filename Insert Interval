//cpp not my solution i copy and pasted from discussion

#define Interval int
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        size_t i = 0;
        
        // Left part (no intersection with newInterval)
        while (i < intervals.size() && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i]);
            ++i;
        }
        
        // newInterval part (with or without merge)
        while (i < intervals.size() && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            ++i;
        }
        res.push_back(newInterval);
        
        // Right part (no intersection with newInterval)
        while (i < intervals.size() && intervals[i][0] > newInterval[1]) {
            res.push_back(intervals[i]);
            ++i;
        }
        return res;
    }
};


//my try [wrong solution]

// [[1,3],[6,9]]
// [2,5]
// [[1,5]]
// [2,7]
// [[1,2],[3,5],[6,7],[8,10],[12,16]]
// [4,8]
// [[1,5]]
// [2,3]
// []
// [1,4]

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& iv, vector<int>& nv) {
        vector<vector<int>> ans;
        int done = 0;
        int left,right;
        
        for(auto v:iv){
            right=v[1];
            if(done == 2){
                ans.push_back(v);   
            }else if(v[1]<nv[0]){
                ans.push_back(v);
            }else if(nv[0]>=v[0] && nv[1]<v[1]){
                ans.push_back(v);
                done=2;
            }else if(done==0 && nv[0]<v[0]){
                left=nv[0];
                done=1;
            }else if(nv[0]>=v[0]){
                // cout<<"here";
                done=1;
                left=v[0];
            }else if(nv[1]<v[0]){
                if(done != 1){
                    ans.push_back({nv[0],nv[1]});
                    ans.push_back(v);
                    done=2;    
                    continue;    
                }
                ans.push_back({left,nv[1]});
                ans.push_back(v);
                done=2;
            }else if(nv[1]<=v[1]){
                ans.push_back({left,v[1]});
                done=2;
            }else{
                // ans.push_back({left,nv[1]});
                // done=2;
                //cout<<v[0]<<" , "<<v[1]<<endl;
            }
        }
        if(done==1){
            if(right>nv[1])
                ans.push_back({left,right});
            else
                ans.push_back({left,nv[1]});
        }
        else if(done ==0)
            ans.push_back(nv);
        return ans;
    }
};
