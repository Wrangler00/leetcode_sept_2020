A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.

//cpp my solution (very slow solution as its not optimized)

class Solution {
    vector<string> partition;
    vector<int> loc;
public:
    void doitplease(int ind,char ch){
        int sz = partition.size();
        for(int i=ind+1;i<sz;i++)   partition[ind]+=partition[i];
        
        partition.erase(partition.begin()+ind+1,partition.end());
        partition[partition.size()-1]+=ch;
        string st = partition.back();
        
        for(auto ch:st) loc[ch-'a'] = ind;
    }
    vector<int> partitionLabels(string s) {
        vector<int> ans;
        loc = vector<int>(26,-1);
        int len = s.length();
        
        for(int i=0;i<len;i++){
            if(loc[s[i]-'a']!=-1){
                doitplease(loc[s[i]-'a'],s[i]);
            }else{
                partition.push_back(string(1,s[i]));
                loc[s[i]-'a'] = partition.size()-1;
            }
        }
        
        for(auto v:partition)
            ans.push_back(v.length());
        
        return ans;
    }
};
