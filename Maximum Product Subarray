Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

//cpp Brute-force [Time Limit Exceeded] ->my solution

int maxProduct(vector<int>& n) {
        int sz = n.size();
        int ans=n[0];
        for(int i=0;i<sz;i++){
            int tmp=n[i],max_so_far=n[i];
            for(int j=i+1;j<sz;j++){
                tmp*=n[j];
                max_so_far = max(tmp,max_so_far);
            }
            ans = max(ans,max_so_far);
        }
        
        return ans;
    }

//cpp not my solution  O(n) solution

class Solution {
public:
    int maxProduct(vector<int>& n) {
        int sz = n.size();
        int minVal,maxVal,maxProduct;
        
        minVal=maxVal=maxProduct=n[0];

        for (int i = 1; i < sz; i++) { 
            if (n[i] < 0) swap(maxVal, minVal); 
            
            maxVal = max(n[i], maxVal * n[i]); 
            minVal = min(n[i], minVal * n[i]); 
            maxProduct = max(maxProduct, maxVal); 
        } 
        
        return maxProduct; 
    }
};
