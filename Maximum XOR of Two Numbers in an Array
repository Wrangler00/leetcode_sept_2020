Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:

Input: [3, 10, 5, 25, 2, 8]

Output: 28

Explanation: The maximum result is 5 ^ 25 = 28.

//cpp solution 1 O(nlogm) [not my solution]

#define ll long
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        ll maxx=0,mask=0;
        
        for(int i=30;i>=0;i--){
            set<ll> se;
            mask |= (1<<i);
            
            for(auto v:nums)    
                se.insert(v & mask);
            
            ll newMax = maxx | (1<<i);
            
            for(auto pre:se){
                if(se.count(newMax^pre)){
                    maxx=newMax;
                    break;
                }
            }
        }
        
        return maxx;
    }
};


//cpp solution 2

class Solution {
public:
    struct Trie {
        Trie* children[2];
    };
int findMaximumXOR(vector<int>& nums) {//test time
        if(nums.size() == 0) {
            return 0;
        }
        // Init Trie.
        Trie* root = new Trie();
        for(int num: nums) {
            Trie* curNode = root;
            for(int i = 31; i >= 0; i --) {
                int curBit = (num >> i) & 1;
                if(curNode->children[curBit] == nullptr) {
                    curNode->children[curBit] = new Trie();
                }
                curNode = curNode->children[curBit];
            }
        }
        int max_xor = 0;
        for(int num: nums) {
            Trie* curNode = root;
            int curSum = 0;
            for(int i = 31; i >= 0; i --) {
                int curBit = (num >> i) & 1;
                if(curNode->children[!curBit] != nullptr) {
                    curSum += (1 << i);
                    curNode = curNode->children[!curBit];
                }else {
                    curNode = curNode->children[curBit];
                }
            }
            max_xor = max(curSum, max_xor);
        }
        return max_xor;
    }
};
